#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2016 OpenWrt.org
START=13
USE_PROCD=1

RUN_INCLUDE=1

. /lib/functions/network.sh

INC=/tmp/etc/firewall.fwknock
TABLE="inet fw4"
KNOCK_PING_CHAIN="knock_ping"
KNOCK_WAN_CHAIN="input_wan_knock"
KNOCK_DNAT_CHAIN="dstnat_wan_knock"
KNOCK_STATUS="kn_stat"
KNOCK_CODES="kn_codes"

BLACKLIST_TIME="1m"

IPV4_ICMP_HEADER_LEN=28
STATUS_ACCEPTED=255

#COUNTER="counter"
COMMENTS=0

network_get_device WAN_IFNAME wan

RUN_OTP_DAEMON=0

add_knock_ping_rules() {
	local mech
	local dpp
	local code
	local digits
	local next
	local key_code
	local section_id=$1
	local COMMENT=""

	config_get mech   ${section_id} mech
	config_get dpp    ${section_id} digitsperping 3
	config_get code   ${section_id} code
	config_get digits ${section_id} digits 6

	if [ "${mech}" == "static" ]; then
	        [ ${dpp} -ne 1 ] && OFFSET=0 || OFFSET=50
	else
		RUN_OTP_DAEMON=1

		# Dummy code for loop length
		code="####################"
		code="${code:0:${digits}}"
	fi

	next=1; while [ ! -z "${code}" ]; do
		round=${next}
		key_code="${idx} . ${round} . meta length"

		if [ "${mech}" == "static" ]; then
			psize=$(expr ${code:0:${dpp}} + ${IPV4_ICMP_HEADER_LEN} + ${OFFSET})
			[ ! -z "${CODES}" ] && CODES="${CODES}, "
			CODES="${CODES}${idx} . ${round} . ${psize}"
		fi

		code=${code:${dpp}}
		[ -z "${code}" ] && next=${STATUS_ACCEPTED} || next=$(expr ${round} + 1)


		[ ${COMMENTS} -eq 1 ] && COMMENT="comment \\\"${COMMENT_PREFIX}: round ${round}\\\""
		# Check packet size against digits
		PING="${PING}\t\t${key_code} @${KNOCK_CODES}"
		if [ ${round} -eq 1 ]; then
			# First round, ignore if in progress or blacklisted
			PING="${PING} ${KEY} . ${round} != @${KNOCK_STATUS}"
			# Block a new sequence within the blacklist time
			PING="${PING} update @${KNOCK_STATUS} { ${KEY} . ${round} timeout ${BLACKLIST_TIME} }"
		else
			PING="${PING} ${KEY} . ${round} @${KNOCK_STATUS} delete @${KNOCK_STATUS} { ${KEY} . ${round} }"
		fi
		# Set next round
		PING="${PING} update @${KNOCK_STATUS} { ${KEY} . ${next} timeout ${timeout_knock} }"
		if [ -z "${code}" ]; then
			# Last round, invalidate if OTP
			[ "${mech}" != "static" ] && PING="${PING} delete @${KNOCK_CODES} { ${key_code} }"
			# Mark knock complete
			PING="${PING} log prefix \\\"Ping knock for ${ports_caption} ${ports} accepted: \\\""
		fi
		PING="${PING} ${COUNTER} return ${COMMENT}\n"

		if [ ${round} -ne  1 ]; then
			[ ${COMMENTS} -eq 1 ] && COMMENT="comment \\\"${COMMENT_PREFIX}: round ${round}, abort sequence\\\""
			PING="${PING}\t\tdelete @${KNOCK_STATUS} { ${KEY} . ${round} } ${COMMENT}\n"
		fi
	done
}

add_knock_port_rules() {
        local knock_port=$1
	local COMMENT=""

	prev=${round}
	round=${next}

	[ ${round} -eq ${last} ] && next=${STATUS_ACCEPTED} || next=$(expr ${round} + 1)

	# Accept also knocking multiple times to the same port
	if [ ${round} -ne 1 ]; then
		[ ${COMMENTS} -eq 1 ] && COMMENT="comment \\\"${COMMENT_PREFIX}: knock again for round ${prev}\\\""
		INPUT="${INPUT}\t\ttcp dport { ${knock_repeat_ports} }"
		INPUT="${INPUT} ${KEY} . ${round} @${KNOCK_STATUS} ${COUNTER} return ${COMMENT}\n"
	fi

	# Repeat ports for next round
	knock_repeat_ports="${knock_port}${knock_except_ports}"

	[ ${COMMENTS} -eq 1 ] && COMMENT="comment \\\"${COMMENT_PREFIX}: round ${round}\\\""
	INPUT="${INPUT}\t\ttcp dport ${knock_port}"
	if [ ${round} -eq 1 ]; then
		# First round, ignore if in progress or blacklisted
		INPUT="${INPUT} ${KEY} . ${round} != @${KNOCK_STATUS}"
		# Block a new sequence within the blacklist time
		INPUT="${INPUT} update @${KNOCK_STATUS} { ${KEY} . ${round} timeout ${BLACKLIST_TIME} }"
	else
		INPUT="${INPUT} ${KEY} . ${round} @${KNOCK_STATUS} delete @${KNOCK_STATUS} { ${KEY} . ${round} }"
	fi
	# Set next round
	INPUT="${INPUT} update @${KNOCK_STATUS} { ${KEY} . ${next} timeout ${timeout_knock} }"
	[ ${round} -eq ${last} ] && INPUT="${INPUT} log prefix \\\"Port knock for ${ports_caption} ${ports} accepted: \\\""
	INPUT="${INPUT} ${COUNTER} return ${COMMENT}\n"

	# Abort sequence if wrong port. The STATUS_IN_PROGRESS will block a new sequence until the blacklist timeout
	if [ ${round} -ne  1 ]; then
		[ ${COMMENTS} -eq 1 ] && COMMENT="comment \\\"${COMMENT_PREFIX}: round ${round} , abort sequence\\\""
		INPUT="${INPUT}\t\tdelete @${KNOCK_STATUS} { ${KEY} . ${round} } ${COMMENT}\n"
	fi
}

add_exception_port() {
	knock_except_ports="${knock_repeat_ports},$1"
}

count_knock_ports() {
	last=$(expr ${last} + 1)
}

add_port() {
	if [ -z "${ports}" ]; then
		ports=$1
		ports_caption="port"
	else
		ports="${ports},$1"
		ports_caption="ports"
	fi
}

add_knock_rules() {
	local action
	local chain
	local section_id=$1
	local COMMENT=""

	idx=$(expr ${idx} + 1)
	KEY="ip saddr . ${idx}"

	config_get enabled         ${section_id} enabled 1
	config_get type            ${section_id} type
	config_get timeout_knock   ${section_id} timeout_knock 10s
	config_get timeout_connect ${section_id} timeout_connect 10s
	config_get target          ${section_id} target

	[ "${enabled}" != "1"  ] && return 

	ports=""
	config_list_foreach ${section_id} port add_port
	# Make sure we have at least one port
	[ -z "${ports}" ] && return 

	if [ "${type}" == "ping" ]; then
		# Ping knock
		COMMENT_PREFIX="!knock ping (${ports_caption} ${ports})"
		add_knock_ping_rules ${section_id}

	else
		#Port knock
		COMMENT_PREFIX="!knock port (${ports_caption} ${ports})"

		last=0
		config_list_foreach $1 knock_port count_knock_ports
		
		knock_except_ports="";
		config_list_foreach ${section_id} exception add_exception_port

		next=1;
		config_list_foreach ${section_id} knock_port add_knock_port_rules
	fi

	# Port rule (INPUT OR DNAT)
	if [ "${target}" == "redirect" ]; then
		config_get dest_ip   ${section_id} dest_ip
		config_get dest_port ${section_id} dest_port
		chain=DNAT
		action="dnat ip to ${dest_ip}:${dest_port}"
	else
		chain=INPUT
		action="accept"
	fi

	key="ip saddr . ${idx} . ${STATUS_ACCEPTED}"

	[ ${COMMENTS} -eq 1 ] &&  COMMENT="comment \\\"!knock ${type} (${ports_caption} ${ports}): accept\\\""
	RULE="\t\ttcp dport { ${ports} } ${key} @${KNOCK_STATUS} "
	[ "${timeout_connect}" == "" -o "${timeout_connect}" == "0s" ] \
		 && RULE="${RULE} delete @${KNOCK_STATUS} { ${key} } " \
		 || RULE="${RULE} update @${KNOCK_STATUS} { ${key} timeout ${timeout_connect} } "
	RULE="${RULE} ${COUNTER} ${action} ${COMMENT}\n"
	# Insert rule at the beginning
	eval ${chain}="\${RULE}\${${chain}}"
}

add_jump() {
	RULES="${RULES}
COMMENT=\"comment \\\"!knock: $2 rules\\\"\"; RULES=\$(nft list chain ${TABLE} $1)
[ \"\${RULES}\" == \"\${RULES#*\${COMMENT}}\" ] && nft insert rule ${TABLE} $1 $4 jump $3 \${COMMENT}
"
}

generate_rules() {
	local WAN_IF_COND=""

	idx=0
	config_load fwknock
	config_foreach add_knock_rules knock
	
	RULES="#Generated by /etc/init.d/fwknock\n"
	for chain in ${KNOCK_WAN_CHAIN} ${KNOCK_DNAT_CHAIN} ${KNOCK_PING_CHAIN}; do
		RULES="${RULES}nft flush chain ${TABLE} ${chain} 2>/dev/null\n"
	done
	for set in ${KNOCK_STATUS}  ${KNOCK_CODES}; do
		RULES="${RULES}nft flush set ${TABLE} ${set} 2>/dev/null\n"
	done

	[ ! -z "${CODES}" ] && CODES="elements = { ${CODES} }; "
	RULES="${RULES}
nft \"table ${TABLE} {
	set ${KNOCK_STATUS} { typeof ip saddr . arp hlen . arp hlen; flags timeout; size 256; \\
				comment \\\"!knock: Status per source ip\\\"; }
	set ${KNOCK_CODES} { typeof arp hlen . arp hlen . meta length; flags timeout; size 256; \\
				comment \\\"!knock: Current code\\\"; ${CODES} }
	chain ${KNOCK_WAN_CHAIN} {\n${INPUT}\t}
	chain ${KNOCK_PING_CHAIN} {\n${PING}\t}
	chain ${KNOCK_DNAT_CHAIN} {\n${DNAT}\t}
}\"

"

	[ ! -z "${WAN_IFNAME}" ] && WAN_IF_COND="iifname ${WAN_IFNAME}"
	add_jump input_wan  input ${KNOCK_WAN_CHAIN}
	add_jump dstnat_wan dnat  ${KNOCK_DNAT_CHAIN}
	add_jump input      ping  ${KNOCK_PING_CHAIN} "icmp type echo-request ${WAN_IF_COND}"
}

reload_service() {
	restart
}

service_triggers() {
	procd_add_reload_trigger fwknock
}

start_service() {
	RULES=""
	INPUT=""
	DNAT=""
	PING=""
	CODES=""

	echo "Generating rules for firewall knocking"
	generate_rules run

	mkdir -p ${INC%/*}
	echo -e >${INC} "${RULES}"

	config_load firewall
	config_get path fwknock path
	if [ -z "${path}" ]; then
		uci_add firewall include fwknock
		uci_set firewall fwknock path ${INC}
		uci_set firewall fwknock fw4_compatible 1
		uci_commit
	fi
 
	[ ${RUN_INCLUDE} -eq 1 ] && sh ${INC}

	if [ ${RUN_OTP_DAEMON} -ne 0 ]; then
		procd_open_instance
		procd_set_param command /usr/bin/fwknock_otp
		procd_set_param respawn
		procd_close_instance
	fi
}

boot() {
        RUN_INCLUDE=0
        start
}
