#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2016 OpenWrt.org
START=13
USE_PROCD=1

RUN_INCLUDE=1

. /lib/functions/network.sh

INC=/tmp/etc/firewall.fwknock
TABLE="inet fw4"
KNOCK_PING_CHAIN="knock_ping"
KNOCK_WAN_CHAIN="input_wan_knock"
KNOCK_DNAT_CHAIN="dstnat_wan_knock"
KNOCK_STATUS="kn_stat"
KNOCK_CODES="kn_codes"

BLACKLIST_TIME="1m"

IPV4_ICMP_HEADER_LEN=28
STATUS_ACCEPTED=255

COMMENTS=0
COUNTER=0

network_get_device WAN_IFNAME wan

RUN_OTP_DAEMON=0

add_knock_ping_rules() {
	local mech
	local dpp
	local code
	local digits
	local next
	local section_id=$1

	config_get mech   ${section_id} mech
	config_get dpp    ${section_id} digitsperping 3
	config_get code   ${section_id} code
	config_get digits ${section_id} digits 6

	if [ "${mech}" == "static" ]; then
	        [ ${dpp} -ne 1 ] && OFFSET=0 || OFFSET=50
	else
		RUN_OTP_DAEMON=1

		# Dummy code for loop length
		code="####################"
		code="${code:0:${digits}}"
	fi

	next=1; while [ ! -z "${code}" ]; do
		round=${next}

		if [ "${mech}" == "static" ]; then
			psize=$(expr ${code:0:${dpp}} + ${IPV4_ICMP_HEADER_LEN} + ${OFFSET})
			echo >>${INC} "nft add element ${TABLE} ${KNOCK_CODES} { ${idx} . ${round} . ${psize} }"
		fi

		code=${code:${dpp}}
		[ -z "${code}" ] && next=${STATUS_ACCEPTED} || next=$(expr ${round} + 1)

		echo -n >>${INC} "nft add rule ${TABLE} ${KNOCK_PING_CHAIN}"
		# Check packet size against digits
		echo -n >>${INC} " ${idx} . ${round} . meta length @${KNOCK_CODES}"
		if [ ${round} -eq 1 ]; then
			# First round, ignore if in progress or blacklisted
			echo -n >>${INC} " ip saddr . ${idx} . ${round} != @${KNOCK_STATUS}"
			# Block a new sequence within the blacklist time
			echo -n >>${INC} " update @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} timeout ${BLACKLIST_TIME} }"
		else
			echo -n >>${INC} " ip saddr . ${idx} . ${round} @${KNOCK_STATUS}"
			echo -n >>${INC} " delete @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} }"
		fi
		# Set next round
		echo -n >>${INC} " update @${KNOCK_STATUS} { ip saddr . ${idx} . ${next} timeout ${timeout_knock} }"
		if [ -z "${code}" ]; then
			# Last round
			# Invalidate if OTP
			[ "${mech}" != "static" ] && echo -n >>${INC} " delete @${KNOCK_CODES} { ${idx} . ${round} . meta length }"
			# Mark knock complete
			echo -n >>${INC} " log prefix \\\"Ping knock for ports ${ports} accepted: \\\""
		fi
		echo -n >>${INC} " return"
		[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock ping \(ports ${ports}\): round ${round}\\\""
		echo    >>${INC} ""

		if [ ${round} -ne  1 ]; then
			echo -n >>${INC} "nft add rule ${TABLE} ${KNOCK_PING_CHAIN}"
			echo -n >>${INC} " delete @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} }"
			[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock \(ports ${ports}\): round ${round}, abort sequence\\\""
			echo    >>${INC} ""
		fi

#		p=$(expr ${p} + ${dpp})
	done
}

add_knock_port_rules() {
        local knock_port=$1

	prev=${round}
	round=${next}
	[ ${round} -eq ${last} ] && next=${STATUS_ACCEPTED} || next=$(expr ${round} + 1)

	# Accept also knocking multiple times to the same port
	if [ ${round} -ne 1 ]; then
		echo -n >>${INC} "nft add rule ${TABLE} ${KNOCK_WAN_CHAIN}"
		echo -n >>${INC} " tcp dport { ${knock_repeat_ports} }"
		echo -n >>${INC} " ip saddr . ${idx} . ${round} @${KNOCK_STATUS}"
		[ ${COUNTER}  -eq 1 ] && echo -n >>${INC} " counter"
		echo -n >>${INC} " return"
		[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock port \(ports ${ports}\): knock again for round ${prev}\\\""
		echo    >>${INC} ""
	fi

	# Repeat ports for next round
	knock_repeat_ports="${knock_port}${knock_except_ports}"

	echo -n >>${INC} "nft add rule ${TABLE} ${KNOCK_WAN_CHAIN}"
	echo -n >>${INC} " tcp dport ${knock_port}"
	if [ ${round} -eq 1 ]; then
		# First round, ignore if in progress or blacklisted
		echo -n >>${INC} " ip saddr . ${idx} . ${round} != @${KNOCK_STATUS}"
		# Block a new sequence within the blacklist time
		echo -n >>${INC} " update @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} timeout ${BLACKLIST_TIME} }"
	else
		echo -n >>${INC} " ip saddr . ${idx} . ${round} @${KNOCK_STATUS}"
		echo -n >>${INC} " delete @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} }"
	fi
	# Set next round
	echo -n >>${INC} " update @${KNOCK_STATUS} { ip saddr . ${idx} . ${next} timeout ${timeout_knock} }"
	[ ${round} -eq ${last} ] && echo -n >>${INC} " log prefix \\\"Port knock for ports ${ports} accepted: \\\""
	[ ${COUNTER}  -eq 1 ] && echo -n >>${INC} " counter"
	echo -n >>${INC} " return"
	[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock port \(ports ${ports}\): round ${round}\\\""
	echo    >>${INC} ""

	# Abort sequence if wrong port. The STATUS_IN_PROGRESS will block a new sequence until the blacklist timeout
	if [ ${round} -ne  1 ]; then
		echo -n >>${INC} "nft add rule ${TABLE} ${KNOCK_WAN_CHAIN}"
		echo -n >>${INC} " delete @${KNOCK_STATUS} { ip saddr . ${idx} . ${round} }"
		[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock \(port ${ports}\): round ${round} , abort sequence\\\""
		echo    >>${INC} ""
	fi
}

add_exception_port() {
	knock_except_ports="${knock_repeat_ports},$1"
}

count_knock_ports() {
	last=$(expr ${last} + 1)
}

add_port() {
	[ -z "${ports}" ] && ports=$1 || ports="${ports},$1"
}

add_knock_rules() {
	local action
	local chain
	local section_id=$1

	idx=$(expr ${idx} + 1)

	config_get enabled         ${section_id} enabled 1
	config_get type            ${section_id} type
	config_get timeout_knock   ${section_id} timeout_knock 10s
	config_get timeout_connect ${section_id} timeout_connect 10s
	config_get target          ${section_id} target

	[ "${enabled}" != "1"  ] && return 

	ports=""
	config_list_foreach ${section_id} port add_port
	# Make sure we have at least one port
	[ -z "${ports}" ] && return 


	if [ "${type}" == "ping" ]; then
		# Ping knock
		add_knock_ping_rules ${section_id}

	else
		#Port knock
	        last=0
		config_list_foreach $1 knock_port count_knock_ports
		
		knock_except_ports="";
		config_list_foreach ${section_id} exception add_exception_port

		next=1;
		config_list_foreach ${section_id} knock_port add_knock_port_rules
	fi

	# Port rule (INPUT OR DNAT)
	if [ "${target}" == "redirect" ]; then
		config_get dest_ip   ${section_id} dest_ip
		config_get dest_port ${section_id} dest_port
		chain="${KNOCK_DNAT_CHAIN}"
		action="dnat ip to ${dest_ip}:${dest_port}"
	else
		chain="${KNOCK_WAN_CHAIN}"
		action="accept"
	fi

	echo -n >>${INC} "nft add rule ${TABLE} ${chain}"
	echo -n >>${INC} " tcp dport { ${ports} }"
	echo -n >>${INC} " ip saddr . ${idx} . ${STATUS_ACCEPTED} @${KNOCK_STATUS}"
	echo -n >>${INC} " update @${KNOCK_STATUS} { ip saddr . ${idx} . ${STATUS_ACCEPTED} timeout ${timeout_connect} }"
	[ ${COUNTER}  -eq 1 ] && echo -n >>${INC} " counter"
	echo -n >>${INC} " ${action}"
	[ ${COMMENTS} -eq 1 ] && echo -n >>${INC} " comment \\\"!knock ${type} \(ports ${ports}\): accept\\\""
	echo    >>${INC} ""
}

generate_rules() {
	echo >${INC}
	idx=0

	# wan input chain
	echo    >>${INC} "nft list chain ${TABLE} ${KNOCK_WAN_CHAIN} >/dev/null 2>&1"
	echo    >>${INC} "if [ \$? -ne 0 ]; then"
	echo    >>${INC} "  nft add chain ${TABLE} ${KNOCK_WAN_CHAIN}"
	echo -n >>${INC} "  nft insert rule ${TABLE} input_wan jump ${KNOCK_WAN_CHAIN}"
	echo    >>${INC}   " comment \\\"!knock: input rules\\\""
	echo    >>${INC} "else"
	echo    >>${INC} "  nft flush chain ${TABLE} ${KNOCK_WAN_CHAIN}"
	echo    >>${INC} "fi"

	# DNAT chain
	echo    >>${INC} "nft list chain ${TABLE} ${KNOCK_DNAT_CHAIN} >/dev/null 2>&1"
	echo    >>${INC} "if [ \$? -ne 0 ]; then"
	echo    >>${INC} "  nft add chain ${TABLE} ${KNOCK_DNAT_CHAIN}"
	echo -n >>${INC} "  nft insert rule ${TABLE} dstnat_wan jump ${KNOCK_DNAT_CHAIN}"
	echo    >>${INC}   " comment \\\"!knock: dnat rules\\\""
	echo    >>${INC} "else"
	echo    >>${INC} "  nft flush chain ${TABLE} ${KNOCK_DNAT_CHAIN}"
	echo    >>${INC} "fi"

	# ping input chain, must be before accept related if ping is accepted
	echo    >>${INC} "nft list chain ${TABLE} ${KNOCK_PING_CHAIN} >/dev/null 2>&1"
	echo    >>${INC} "if [ \$? -ne 0 ]; then"
	echo    >>${INC} "  nft add chain ${TABLE} ${KNOCK_PING_CHAIN}"
	echo    >>${INC} "  nft insert rule ${TABLE} input icmp type echo-request iifname ${WAN_IFNAME} jump ${KNOCK_PING_CHAIN}"
	echo    >>${INC} "else"
	echo    >>${INC} "  nft flush chain ${TABLE} ${KNOCK_PING_CHAIN}"
	echo    >>${INC} "fi"

	# Sets
	echo -n >>${INC} "nft add set ${TABLE} ${KNOCK_STATUS} { typeof ip saddr . arp hlen . arp hlen\; flags timeout\; size 256\;"
	echo    >>${INC} " comment \\\"!knock: Status per source ip\\\"\; }"
	echo    >>${INC} "nft flush set ${TABLE} ${KNOCK_STATUS}"
	echo -n >>${INC} "nft add set ${TABLE} ${KNOCK_CODES} { typeof arp hlen . arp hlen . meta length\; flags timeout\; size 256\;"
	echo    >>${INC} " comment \\\"!knock: Current code\\\"\; }"
	echo    >>${INC} "nft flush set ${TABLE} ${KNOCK_CODES}"

	config_load fwknock
	config_foreach add_knock_rules knock
}

reload_service() {
	restart
}

service_triggers() {
	procd_add_reload_trigger fwknock
}

start_service() {
	generate_rules

	config_load firewall
	config_get path fwknock path
	if [ -z "${path}" ]; then
		uci_add firewall include fwknock
		uci_set firewall fwknock path ${INC}
		uci_set firewall fwknock fw4_compatible 1
		uci_commit
	fi

	[ ${RUN_INCLUDE} -eq 1 ] && sh ${INC}

	if [ ${RUN_OTP_DAEMON} -ne 0 ]; then
		procd_open_instance
		procd_set_param command /usr/bin/fwknock_otp
		procd_set_param respawn
		procd_close_instance
	fi
}

boot() {
        RUN_INCLUDE=0
        start
}
